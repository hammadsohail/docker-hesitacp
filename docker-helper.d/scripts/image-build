#!/usr/bin/env bash

if [[ ! "$1" || "${1,,}" == "help" || "${1,,}" == "--help" || "${1,,}" == "-h" ]]; then
    echo "image-build <image> [...<args>]"
    echo
    echo "Arguments:"
    echo "  --no-cache                 Run build with \"--no-cache\"."
    echo "  --pull-os                  Pull Debian image before build."
    echo "  --progress=<string>        (auto|plain|tty) - Output format."
    echo "  --target=<string>          Set the target build stage to build."
    echo "  --show-cmd                 Display the generated \"docker build\" command without executing."
    exit
fi

# Repository name in the docker-helper.yml
IMAGE_NAME="$1"

custom_args=""
progress="auto"
show_cmd=""
target=""

args=("$@")
for arg in ${args[@]}; do
    if [[ "$arg" == "--no-cache" ]]; then
        custom_args+=" --no-cache"
    elif [[ -n "$(echo "$arg" | grep -E "^--progress=")" ]]; then
        progress="$(echo "$arg" | sed -En "s|^--progress=[\"']*(.*)[\"']*|\1|p")"
    elif [[ -n "$(echo "$arg" | grep -E "^--target=")" ]]; then
        target="$(echo "$arg" | sed -En "s|^--target=[\"']*(.*)[\"']*|\1|p")"
    elif [[ "$arg" == "--show-cmd" ]]; then
        show_cmd="yes"
    elif [[ "$arg" == "--pull-os" ]]; then
        docker pull debian:buster
    fi
done

# Load data from images registered in docker-helper.yml
source <(dhelper_yaml | grep "^DHELPER_images_" | sed -E "s/^(.*)$/export \1/g")

# Get the image data in docker-helper.yml
eval "SOURCE_IMAGE=\${DHELPER_images_${IMAGE_NAME}_source_image:?}"
eval "USE_LOCAL_REPO=\$DHELPER_images_${IMAGE_NAME}_use_local_repo"
eval "HESTIACP_BRANCH=\$DHELPER_images_${IMAGE_NAME}_branch"
eval "IMAGE_VERSION=\${DHELPER_images_${IMAGE_NAME}_version:?}"

if [[ "$SOURCE_IMAGE" =~ : ]]; then
    HESTIACP_IMAGE="$SOURCE_IMAGE-$IMAGE_VERSION"
else
    HESTIACP_IMAGE="$SOURCE_IMAGE:$IMAGE_VERSION"
fi

if [[ -n "$target" ]]; then
    custom_args+=" --target=\"$target\""
fi

if [[ "${USE_LOCAL_REPO,,}" == "yes" ]]; then
    if [[ -d "$PROJECT_ROOT/hestiacp" ]]; then
        echo "The local hestia repository will be used in the build"
        custom_args+=" --build-arg HESTIACP_SOURCE=local"
    else
        echo "Hestia repository not found in project root"
        exit 1
    fi
fi

# Add variables used in the build
declare -a build_vars=(HESTIACP_REPOSITORY HESTIACP_BRANCH MULTIPHP_VERSIONS MARIADB_CLIENT_VERSION ZLIB_VERSION)
for var_name in "${build_vars[@]}"; do
    if [[ -n "${!var_name}" ]]; then
	    custom_args+=" --build-arg $var_name=\"${!var_name}\""
	fi
done

build_cmd="docker build --force-rm ${custom_args} \
    --build-arg HSTC_IMAGE_VERSION=${IMAGE_VERSION} \
    --progress=\"$progress\" \
    -t \"$HESTIACP_IMAGE\" \
    -f \"$PROJECT_ROOT/Dockerfile\" \
    \"$PROJECT_ROOT\""

if [[ "${show_cmd,,}" == "yes" ]]; then
    echo "$build_cmd"
    exit
fi

export DOCKER_BUILDKIT=1
bash -c "$build_cmd"
